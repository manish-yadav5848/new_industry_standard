
from pyspark.sql import SparkSession
from pyspark.sql.functions import *


def transform(spark: SparkSession, primary_key: list):

    consumption_df = spark.sql("select coalesce(m1.client_id, '-9999') as client_id, coalesce(nullif(m1.plan_number, ''), '-9999') as plan_number, coalesce(nullif(m1.div_sub_id, ''), '-9999') as div_sub_id, m1.core_cash_value_amount, m1.noncore_cash_value_amount, m1.sdba_cash_value_amount, coalesce(m1.life_cash_value_amount, 0.00) as life_cash_value_amount_monthly, m1.life_valuation_date, coalesce(m1.loan_cash_value_amt, 0.00) as loan_cash_value_amount, m1.ee_cash_value_amount, m1.er_cash_value_amount, coalesce(m1.allocated_participant_count, 0) as allocated_participant_count, coalesce(m1.active_participant_count, 0) as active_participant_count, coalesce(m1.participant_count, 0) as participant_count, m1.ytd_contributions, coalesce(m1.source_cycle_date, current_date() -1) as source_cycle_date, cast(null as VARCHAR(36)) as plan_key from ( select t1.source_cycle_date, t1.client_id, t1.div_sub_id, t1.plan_number, t3.valuation_date as life_valuation_date, cast(t1.core_cash_value_amount as DECIMAL(17, 2)) as core_cash_value_amount, cast(t1.ee_cash_value_amount as DECIMAL(17, 2)) as ee_cash_value_amount, cast(t1.er_cash_value_amount as DECIMAL(17, 2)) as er_cash_value_amount, cast(t3.life_cash_value_amount as DECIMAL(13, 2)) as life_cash_value_amount, cast(t1.sdba_cash_value_amount as DECIMAL(17, 2)) as sdba_cash_value_amount, cast(t4.loan_cash_value_amt as DECIMAL(17, 2)) as loan_cash_value_amt, cast( ( coalesce(t1.sdba_cash_value_amount, 0.00) + coalesce(t4.loan_cash_value_amt, 0.00) + coalesce(t3.life_cash_value_amount, 0.00) ) as DECIMAL(13, 2) ) as noncore_cash_value_amount, cast(c1.allocated_participant_count as INTEGER) as allocated_participant_count, cast(c1.active_participant_count as INTEGER) as active_participant_count, cast(c1.participant_count as INTEGER) as participant_count, cast(t1.ytd_contributions as DECIMAL(17, 2)) as ytd_contributions from ( select p1.client_id, p1.plan_number, p1.div_sub_id, p1.source_cycle_date, sum(p1.core_cash_value_amount) as core_cash_value_amount, sum(coalesce(ee_cash_value_amount, 0.00)) as ee_cash_value_amount, sum(coalesce(er_cash_value_amount, 0.00)) as er_cash_value_amount, sum(sdba_cash_value_amount) as sdba_cash_value_amount, sum(p1.ytd_contributions) as ytd_contributions from ( select trim(pcb.client_id) as client_id, trim(pcb.plan_number) as plan_number, trim(p.div_sub_id) as div_sub_id, pcb.source_cycle_date, coalesce(pcb.cash_value_amount, 0.00) as core_cash_value_amount, case when money_type_description = 'EE' then cash_value end as ee_cash_value_amount, case when money_type_description = 'ER' then cash_value end as er_cash_value_amount, coalesce(pcb.sdba_cash_value_amount, 0.00) as sdba_cash_value_amount, coalesce(pcb.ytd_contributions, 0.00) as ytd_contributions from participant_core_balance pcb left outer join participant p on pcb.plan_number = p.plan_number and pcb.client_id = p.client_id and pcb.participant_id = p.participant_id ) p1 group by p1.client_id, p1.plan_number, p1.div_sub_id, p1.source_cycle_date ) t1 left outer join ( select k.client_id, k.plan_number, k.div_sub_id, sum(coalesce(k.loan_cash_value_amt, 0.00)) as loan_cash_value_amt from ( select pl.client_id, pl.plan_number, pl.participant_id, coalesce(nullif(pt.div_sub_id, ''), '-9999') as div_sub_id, case when pl.source_system = 'PREMIER' THEN outstanding_principal_balance ELSE loan_balance end as loan_cash_value_amt from participant_loan pl left outer join participant pt on coalesce(pt.client_id, '-9999') = coalesce(pl.client_id, '-9999') and coalesce(pt.plan_number, '-9999') = coalesce(pl.plan_number, '-9999') and coalesce(pt.participant_id, '-9999') = coalesce(pl.participant_id, '-9999') ) k group by k.plan_number, k.div_sub_id, k.client_id ) t4 on coalesce(t1.client_id, -9999) = coalesce(t4.client_id, -9999) and coalesce(t1.plan_number, -9999) = coalesce(t4.plan_number, -9999) and coalesce(t1.div_sub_id, -9999) = coalesce(t4.div_sub_id, -9999) left outer join ( select sum(coalesce(plf.cash_value_amt, 0)) as life_cash_value_amount, plf.plan_number, pt.div_sub_id, plf.valuation_date from participant_life_fund_monthly plf left outer join ( select plan_number, participant_id, div_sub_id from participant group by plan_number, participant_id, div_sub_id ) pt on coalesce(pt.plan_number, '-9999') = coalesce(plf.plan_number, '-9999') and coalesce(pt.participant_id, '-9999') = coalesce(plf.participant_id, '-9999') group by plf.plan_number, pt.div_sub_id, plf.valuation_date ) as t3 on coalesce(t1.plan_number, -9999) = coalesce(t3.plan_number, -9999) and coalesce(t1.div_sub_id, -9999) = coalesce(t3.div_sub_id, -9999) left outer join ( select plan_number, client_id, div_sub_id, count(distinct (allocated_participant_count)) as allocated_participant_count, count(distinct (Active_participant_count)) as Active_participant_count, count(distinct (participant_count)) as participant_count from ( select pt.plan_number, pt.client_id, coalesce(nullif(pt.div_sub_id, ''), '-9999') as div_sub_id, case when source_system = 'VRP-PB' OR source_system = 'VRP_SP' then case when PARTICIPANT_ACCOUNT_TYPE_CODE = 'ALLOC' then participant_id end when source_system = 'PREMIER' then participant_id end as allocated_participant_count, case when source_system = 'VRP-PB' or source_system = 'VRP-SP' then case when PARTICIPANT_STATUS <= 16 then participant_id end when source_system = 'PREMIER' then case when PARTICIPANT_STATUS = 'A' then participant_id end end as Active_participant_count, participant_id as participant_count from participant pt ) group by plan_number, div_sub_id, client_id ) as c1 on coalesce(t1.plan_number, -9999) = coalesce(c1.plan_number, -9999) and coalesce(t1.div_sub_id, -9999) = coalesce(c1.div_sub_id, -9999) ) m1 where div_sub_id not in ('-9999', '') order by plan_number desc, div_sub_id desc")

    return consumption_df